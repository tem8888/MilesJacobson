const User = require('../models/User')
const Bid = require('../models/Bid')
const Player = require('../models/Player')
const sendWinnersMessages = require('../functions/sendWinnersMessages')
const editMoneyTable = require('../functions/editMoneyTable')
const roundEnd = require('../functions/roundEnd')
const roundStart = require('../functions/roundStart')
const Squadlist = require('../models/Squadlist')

module.exports = {
  name: 'round',
  description: 'Round starter',
  execute(message, args) {
    if (!message.member.hasPermission('MANAGE_MESSAGES'))
      return message.channel.send(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.`)
    if (args.length !== 2)
      return message.channel.send(`‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.`)
    let round = Number(args[0]) // –Ω–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞ –∫–∞–∫ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    if (args[1] === 'start') {
      message.channel.send(`‚òëÔ∏è <@&${process.env.ONLINE_ROLE}> –†–ê–£–ù–î **#${round}** –ù–ê–ß–ê–õ–°–Ø.`)
      roundStart(round)
    }
    if (args[1] === 'check') {
      let msgContent = ''
      User.find({ currentRound: round })
        .then((users) => {
          for (user of users) {
            msgContent += `ü¶• ${user.username}\n`
          }
          message.channel.send(`–ö—Ç–æ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª –±–∏–¥?\n\n${msgContent}`)
        })
        .catch(() => {
          message.channel.send(`–í—Å–µ —Å–¥–µ–ª–∞–ª–∏ –±–∏–¥—ã, –º–æ–ª–æ–¥—Ü—ã!`)
        })
    } else if (args[1] === 'end') {
      message.client.channels.cache.get(process.env.MAIN_NETWORK_CHANNEL).send(`‚úÖ **–†–ê–£–ù–î ${round} –ó–ê–ö–û–ù–ß–ï–ù.**`)

      Bid.find({ round: 0 }) // –ò—â–µ–º –±–∏–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        .then( async (bidList) => {
          const bidWinnersList = []

           label: for (let i = 1; i <= bidList.length; i++) {
          //  label: for (const i of Array.from(Array(bidList.length).keys()).slice(1)) {
            let myBid = bidList[i - 1]
            let winnerBid = {losers:[]}
           // let loserBid = {}
          //  winnerBid.losers = []
            let checkBid = false // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –Ω–∞ –∏–≥—Ä–æ–∫–∞ –±—ã–ª–∏ –¥—Ä—É–≥–∏–µ –±–∏–¥—ã

            for (bid of bidWinnersList) {
              // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ. –ï—Å–ª–∏ —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±—Ä–∞–Ω–Ω—ã—Ö, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ –∏ –±–µ—Ä–µ–º –Ω–æ–≤—ã–π –±–∏–¥.
              if (bid.playerId === myBid.playerId) {
                continue label
              }
            }

            if (i < bidList.length) {
              // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –±–∏–¥—ã –∏–∑ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –º–∞—Å—Å–∏–≤–∞
              for (bid of bidList.slice(i)) {

                if (myBid.playerId === bid.playerId) {
                  //
                  // –ï—Å–ª–∏ –Ω–∞—à–ª–æ—Å—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ –∏–≥—Ä–æ–∫—É
                  //
                  checkBid = true

                  let coeff1 = myBid.price * bid.coeff
                  let coeff2 =  bid.price * myBid.coeff

                  if (coeff1 < coeff2) {
                   // winnerBid = bid
                    winnerBid = Object.assign(bid, winnerBid)
                    //loserBid = myBid
                    winnerBid.losers.push({
                      club: myBid.club,
                      price: myBid.price
                    })
                    // winnerBid = Object.assign(winnerBid, bid.toObject())
                    myBid = bid
                  } else if (coeff1 > coeff2) {
                   // winnerBid = myBid
                   winnerBid = Object.assign(myBid, winnerBid)
                    //loserBid = bid

                    winnerBid.losers.push({
                      club: bid.club,
                      price: bid.price
                    })
                    // winnerBid = Object.assign(winnerBid, myBid.toObject())
                  } else {
                    // –ï—Å–ª–∏ —Å–ª—É—á–∏–ª–∞—Å—å –Ω–∏—á—å—è, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ –∑–∞–Ω—è—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    myBid.place > bid.place
                      ? (winnerBid = myBid)
                      : (winnerBid = bid)
                  }
                } else if (!checkBid) {
                  // –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π, –∑–Ω–∞—á–∏—Ç –≤—ã–∏–≥—Ä–∞–ª –ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ –±–∏–¥
                  winnerBid = myBid
                }
              }
            } else {
              winnerBid = bidList[i - 1]
            }

            bidWinnersList.push(winnerBid) // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
            let newSquadPlayer = new Squadlist({
              uid: winnerBid.playerId,
              name: winnerBid.player,
              club: winnerBid.club,
              status: 'new',
            })
            await User.findOneAndUpdate(
              //
              // –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª—É–±–æ–≤ –≤ –ë–î - –±–∞–ª–∞–Ω—Å, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, —á–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤
              //
              { userId: winnerBid.userId },
              {
                $inc: {
                  money: -Number(Math.round(winnerBid.price + 'e2') + 'e-2'),
                  coeff: 0.2,
                  players: 1
                },
              },
              { useFindAndModify: false }
            )
            //
           // –°—Ç–∞–≤–∏–º –∏–≥—Ä–æ–∫—É –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å, —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫–∏–Ω—É—Ç—å –ø–æ –Ω–µ–º—É –±–∏–¥
           //
            await Player.findOneAndUpdate(
              { uid: winnerBid.playerId },
              { status: 'done' },
              { upsert: true, useFindAndModify: false }
            )
            
            await newSquadPlayer.save()
          }

          roundEnd(round) // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –†–∞—É–Ω–¥ –¥–ª—è –±–∏–¥–æ–≤
          editMoneyTable(message) // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ –∫–æ–º–∞–Ω–¥
          sendWinnersMessages(bidWinnersList, message) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ–≤–µ—Ä—à–∏–≤—à–∏—Ö—Å—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞—Ö
          
        })
        .catch((error) => {
          console.log('error: ', error)
        })
    }
  },
}
